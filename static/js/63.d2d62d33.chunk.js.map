{"version":3,"file":"static/js/63.d2d62d33.chunk.js","mappings":"gQAGaA,EAAMC,EAAAA,GAAAA,IAAH,2CAGHC,GAAaD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,yEAKVG,EAAQH,EAAAA,GAAAA,MAAH,yHAOLI,GAAQJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,yJASLM,EAASN,EAAAA,GAAAA,OAAH,gc,SCtBNO,EAAc,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAErBC,GAAWC,EAAAA,EAAAA,MAsBjB,OACE,0BACE,SAAC,KAAD,CACEC,cAvBgB,CACpBC,KAAM,GACNC,OAAQ,IAsBJC,SAnBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAExBJ,EAAOG,EAAOH,KAEOJ,EAASS,MAAK,SAAAC,GAAO,OAAIA,EAAQN,OAASG,EAAOH,KAAKO,MAAjC,IAG9CC,MAAM,GAAD,OAAIR,EAAJ,+BAGPH,GAASY,EAAAA,EAAAA,IAAWN,IAEpBC,IACD,EAIG,UAGE,UAACf,EAAD,YACE,UAACE,EAAD,CAAOmB,QAAQ,OAAf,kBACE,SAAClB,EAAD,CACEmB,KAAK,OACLX,KAAK,OACLY,GAAG,OACHC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAIZ,UAACxB,EAAD,CAAOmB,QAAQ,SAAf,iBACE,SAAClB,EAAD,CACEmB,KAAK,MACLX,KAAK,SACLa,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGR,SAACrB,EAAD,CAAQiB,KAAK,SAAb,+BAKb,E,oBC1DYpB,EAAQH,EAAAA,GAAAA,MAAH,gGAKLI,EAAQJ,EAAAA,GAAAA,MAAH,yJCFL4B,EAAS,WAElB,IAAMC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBtB,GAAWC,EAAAA,EAAAA,MAEjB,OACI,UAAC,EAAD,oCACI,SAAC,EAAD,CACIa,KAAK,OACLX,KAAK,SACLoB,MAAOH,EACPI,SAAU,SAAAC,GAAK,OAAIzB,GAAS0B,EAAAA,EAAAA,GAAaD,EAAME,OAAOJ,OAAvC,MAI9B,EClBYK,EAAOrC,EAAAA,GAAAA,GAAH,yFAKJsC,EAAWtC,EAAAA,GAAAA,GAAH,oIAORM,EAASN,EAAAA,GAAAA,OAAH,gcCVNuC,EAAkB,SAAC,GAAiB,IAAfrB,EAAc,EAAdA,QAExBT,GAAWC,EAAAA,EAAAA,MAETc,EAAqBN,EAArBM,GAAIX,EAAiBK,EAAjBL,OAAQD,EAASM,EAATN,KAEpB,OACI,+BACI,UAAC0B,EAAD,YAAU,0BAAO1B,KAAY,0BAAOC,IAApC,KAAmD,SAAC,EAAD,CAAQU,KAAK,SAASiB,QAAS,kBAAM/B,GAASgC,EAAAA,EAAAA,IAAcjB,GAA7B,EAA/B,wBAG9D,ECVYkB,EAAc,SAAC,GAAkB,IAAhBlC,EAAe,EAAfA,SAEpBqB,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAErBY,EAAkBnC,EAASqB,QAAO,SAAAX,GAAO,OAAIA,EAAQN,KAAKgC,cAAcC,SAAShB,EAAOe,cAA/C,IAE/C,OACI,SAACP,EAAD,UACKM,EAAgBG,KAAI,SAAC5B,GAClB,OACI,SAACqB,EAAD,CAAkCrB,QAASA,GAArBA,EAAQM,GAErC,KAGZ,E,UCVc,SAASuB,IAEpB,IAAMtC,GAAWC,EAAAA,EAAAA,MACXF,GAAWsB,EAAAA,EAAAA,IAAYkB,EAAAA,IAM7B,OAJAC,EAAAA,EAAAA,YAAU,WACNxC,GAASyC,EAAAA,EAAAA,MACZ,GAAE,CAACzC,KAGA,UAACV,EAAD,YACI,2CACA,SAACQ,EAAD,CAAaC,SAAUA,KACvB,qCACCA,GAAYA,EAAS2C,QAAU,GAC5B,iCACI,SAACvB,EAAD,KACA,SAACc,EAAD,CAAalC,SAAUA,QAE1B,4EAIhB,C","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","pages/PhoneBookPage.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Form, Field } from 'formik';\n\nexport const Box = styled.div`\n   padding: 40px;\n`\nexport const StyledForm = styled(Form)`\n   display: flex;\n   flex-direction: column;  \n`\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    max-width: 200px;\n\n    margin-top: 10px;\n`\nexport const Input = styled(Field)`\n  height: 35px;\n  padding-left: 20px;\n  margin-top: 10px;\n  border: 1px solid gray;\n  border-radius: 4px;\n  outline: none;\n`;\n\nexport const Button = styled.button`\n  width: 150px;\n  padding: 10px;\n  margin-top: 20px;\n  background-color: white;\n  border: none;\n  border-radius: 4px;\n  outline: none;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n\n  &:hover {\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\n      rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\n      rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n  }\n`;","import { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { StyledForm, Label, Button, Input } from './ContactForm.styled';\n\nexport const ContactForm = ({contacts}) => {\n  \n  const dispatch = useDispatch();\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n   \n  const handleSubmit = (values, { resetForm }) => {\n\n    const name = values.name;\n\n    const isAlreadyInContact = contacts.find(contact => contact.name === values.name.trim());\n\n    if (isAlreadyInContact) {\n      alert(`${name} is already in contacts !`);\n      return;\n    }\n    dispatch(addContact(values));\n\n    resetForm();\n  };\n  \n  return (\n    <div>\n      <Formik \n        initialValues={initialValues}\n        onSubmit={handleSubmit}>\n        <StyledForm >\n          <Label htmlFor=\"name\">Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              id='name'\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />    \n          </Label>\n        \n          <Label htmlFor=\"number\">Tel\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </Label>\n              <Button type='submit'>Add contact</Button>\n          </StyledForm>\n      </Formik> \n    </div>  \n  )          \n}\n","import styled from \"styled-components\";\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    max-width: 200px;\n`\nexport const Input = styled.input`\n  height: 35px;\n  padding-left: 20px;\n  margin-top: 10px;\n  border: 1px solid gray;\n  border-radius: 4px;\n  outline: none;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/selectors';\nimport { Label, Input } from \"./Filter.styled\";\n\nexport const Filter = () => {\n\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    return(\n        <Label>Find contacts by name\n            <Input\n                type=\"text\"\n                name=\"filter\"\n                value={filter}\n                onChange={event => dispatch(updateFilter(event.target.value))}\n            />\n        </Label>\n    );\n};\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    list-style: none;\n    padding: 0px;\n    max-width: 500px;\n`\nexport const ListItem = styled.li`\n    display: flex;\n    align-items: baseline;\n    margin-top: 10px;\n    justify-content: space-between;\n`\n\nexport const Button = styled.button`\n  width: 150px;\n  padding: 10px;\n  margin-top: 20px;\n  background-color: white;\n  border: none;\n  border-radius: 4px;\n  outline: none;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n\n  &:hover {\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 54px 55px,\n      rgba(0, 0, 0, 0.12) 0px -12px 30px, rgba(0, 0, 0, 0.12) 0px 4px 6px,\n      rgba(0, 0, 0, 0.17) 0px 12px 13px, rgba(0, 0, 0, 0.09) 0px -3px 5px;\n  }\n`;\n","import { ListItem, Button } from './ContactList.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactListItem = ({ contact }) => {\n\n    const dispatch = useDispatch();\n\n    const { id, number, name } = contact;\n\n    return (\n        <>      \n            <ListItem><span>{name}</span><span>{number}</span> <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>Delete</Button></ListItem>         \n        </>             \n    );\n};\n","import { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/selectors';\nimport { List} from \"./ContactList.styled\";\nimport { ContactListItem } from './ContactListItem';\n\nexport const ContactList = ({ contacts }) => {\n\n    const filter = useSelector(selectFilter);\n\n    const visibleContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n\n    return (\n        <List>\n            {visibleContacts.map((contact) => {\n                return (\n                    <ContactListItem key={contact.id} contact={contact}/>\n                );   \n            })}    \n        </List>\n    );\n};\n","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Box } from '../components/ContactForm/ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { useEffect } from 'react';\n\n\nexport default function PhoneBookPage () {\n   \n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);          \n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <Box>\n            <h1>Name contacts</h1>          \n            <ContactForm contacts={contacts} />         \n            <h2>Contacts</h2>      \n            {contacts && contacts.length >= 1 ? (\n                <>              \n                    <Filter />             \n                    <ContactList contacts={contacts} />              \n                </>             \n            ) : (<h2>No contacts yet. Fill the fields to add some.</h2>                   \n            )}            \n        </Box>\n    )\n}"],"names":["Box","styled","StyledForm","Form","Label","Input","Field","Button","ContactForm","contacts","dispatch","useDispatch","initialValues","name","number","onSubmit","values","resetForm","find","contact","trim","alert","addContact","htmlFor","type","id","pattern","title","required","Filter","filter","useSelector","selectFilter","value","onChange","event","updateFilter","target","List","ListItem","ContactListItem","onClick","deleteContact","ContactList","visibleContacts","toLowerCase","includes","map","PhoneBookPage","selectContacts","useEffect","fetchContacts","length"],"sourceRoot":""}